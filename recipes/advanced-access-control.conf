error_log  /dev/stdout info;
pid     /tmp/nginx.pid;

events {
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $bytes_sent $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" "$http_x_real_ip" ';

    satisfy any;

	#allow 127.0.0.0/8;
	#allow 10.0.0.0/8;
	#allow 172.16.0.0/12;
	#allow 192.168.0.0/16;
    deny all;

    access_by_lua_block {
        local allowed = false
		-- get host
		local host = ngx.var.host
        -- get URL
        local uri = ngx.var.uri
        -- get method
        local method = ngx.req.get_method()
		-- whitelist
		local whitelist = {
		  ["\\.example\\.com$"] = {"^/callback/file/oss$"}
        }
		for host_regex, uri_regexes in pairs(whitelist) do
          local m, err = ngx.re.match(host, host_regex)
          if not m then
            if err then
              ngx.log(ngx.ERR, "lua access control err: ", err)
              break
            end
          else
            for _, uri_regex in ipairs(uri_regexes) do
              local m, err = ngx.re.match(uri, uri_regex)
              if not m then
                if err then
                  ngx.log(ngx.ERR, "lua access control err: ", err)
                  break
                end
              else
                -- found a match
                allowed = true
                break
              end
            end
          end
        end
        if not allowed then
          ngx.status = ngx.HTTP_FORBIDDEN
		  ngx.header.content_type = "text/plain"
		  ngx.say("403 Forbidden: You don't have access to this resource.")
		  ngx.log(ngx.WARN, "Not allowed to access the resource  ["..method.." "..host.." "..uri.."]")
        else
          ngx.status = ngx.OK
        end
	    return ngx.exit(ngx.status)
	}

    access_log /dev/stdout main;

    server {
        listen 80;
        server_name _;
    }
}
